<!doctype html>

<head>
    <title>Sussy Block Dodge</title>
</head>

<body>
    <canvas id="gameCanvas" width="800" height="600">
    </canvas>
    <h1>Controls: Up Arrow to Jump.
        Last as long as possible!</h1>
    <script>
        var canvas, canvasContext;

        window.onload = function() {
            canvas = document.getElementById('gameCanvas');
            canvasContext = canvas.getContext('2d');

            document.addEventListener("keydown", keyPressed);
            document.addEventListener("keyup", keyReleased);

            setInterval(mainloop, 1000 / 60);
        }

        var userName = '';

        while (userName == '' || userName == null) {
            userName = prompt('Enter Username')
        }

        var difficulty = '';
        var pass = false;
        while (pass == false) {
            difficulty = prompt('Choose a difficulty', 'Easy, Normal, Impossible'); //prompt for player to choose game difficulty
            if (difficulty == 'Easy' || difficulty == 'Normal' || difficulty == 'Impossible') {
                pass = true;
            }
        }


        var playerYup = 0; //player variable for moving up

        if (difficulty == 'Easy') { //difficultys which change player vertical speed
            var playerYup = 9;
        }
        if (difficulty == 'Normal') {
            var playerYup = 6;
        }
        if (difficulty == 'Impossible') {
            var playerYup = 3;
        }

        var gameRun = true;

        var startingPos = true;

        function mainloop() {
            if (gameRun == true) {

                colorRect(0, 0, canvas.width, canvas.height, 'black'); // bg
                colorRect(playerXpos, playerYpos, PLAYER_SIZE, PLAYER_SIZE, 'green'); // player

                drawText('Score: ' + score, 50, 50, '20px Arial', 'white'); //score that stays on screen during play

                playerMove();
                gravity();

                enemyMove();
                drawEnemy();
                hit();
                //drawImg();

                if (startingPos) {
                    for (i = 0; i < totalEnemies; i++) {
                        makeEnemy();
                    }
                    startingPos = false;
                }

            } else {
                colorRect(0, 0, canvas.width, canvas.height, 'red'); //death screen
                drawText(userName + ',  you had a score of: ' + score, canvas.width / 2, canvas.height / 2, '30px Arial', 'white'); //displays players score when they die
            }
        } //end of func

        //player variables
        var playerYpos = 200;
        const playerXpos = 50;
        const PLAYER_SIZE = 20;
        var upKeypress = false;
        const UP_KEY = 38;


        //enemy obstacles variables
        const ENEMY_WIDTH = 20;
        const ENEMY_HEIGHT = 250;
        var enemyYpos = 300;
        var enemyXpos = 400;
        var enemyXspeed = -5;

        var enemies = [];
        var totalEnemies = 8;

        //player movement
        function playerMove() {
            if (upKeypress)
                playerYpos -= playerYup;
        } //end of func

        //player key movements
        function keyPressed(evt) {
            if (evt.keyCode == UP_KEY) {
                upKeypress = true;
            }

        } //end of func

        function keyReleased(evt) {
            if (evt.keyCode == UP_KEY) {
                upKeypress = false;
            }

        } //end of func


        function hit() { //function for detecting when player touches something
            enemies.forEach(function(enemy, i, array) {
                if (enemy.enemyXpos + enemy.ENEMY_SIZE > playerXpos && enemy.enemyXpos < playerXpos + PLAYER_SIZE && enemy.enemyYpos + enemy.ENEMY_SIZE > playerYpos && enemy.enemyYpos < playerYpos + PLAYER_SIZE) {

                    location.reload();
                };

                if (enemy.enemyYpos + enemy.ENEMY_HEIGHT > playerYpos && enemy.enemyYpos < playerYpos + PLAYER_SIZE && enemy.enemyXpos + enemy.ENEMY_WIDTH > playerXpos && enemy.enemyXpos < playerXpos + PLAYER_SIZE) {
                    gameRun = false;
                    drawText(userName + ',  you had a score of: ' + score, canvas.width / 2, canvas.height / 2, '30px Arial', 'white');
                }

                if (playerYpos > canvas.height) {
                    gameRun = false;
                    drawText(userName + ',  you had a score of: ' + score, canvas.width / 2, canvas.height / 2, '30px Arial', 'white');
                }

                if (playerYpos < 0) {
                    gameRun = false;
                    drawText(userName + ',  you had a score of: ' + score, canvas.width / 2, canvas.height / 2, '30px Arial', 'white');
                }

            });
        } //end of func

        var score = 0;

        function enemyMove() { //function for enemy movement
            enemies.forEach(function(enemy) {

                enemy.enemyXpos += enemy.enemyXspeed;

                if (enemy.enemyXpos < -5) {
                    enemy.enemyXpos = 800;

                    var enemyPos = Math.floor(Math.random() * 3) + 1;
                    // enemy.enemyXspeed = Math.floor(Math.random() * (8 - 4) - 4);
                }
                if (enemy.enemyXpos < 0) {
                    enemy.enemyXpos = canvas.width;
                    enemy.enemyXspeed = Math.floor(Math.random() * (8 - 4) - 4);
                    enemy.enemyYpos = Math.floor(Math.random() * (600 - 100) - 100);
                    score++; //adds to the players score
                }
            });
        } //end of func

        function makeEnemy() {
            var enemyPos = Math.floor(Math.random() * 3) + 1;
            const ENEMY_WIDTH = 20;
            const ENEMY_HEIGHT = 200;
            var enemyYpos = enemyPos * (canvas.height / 3);
            var enemyXpos = 400;
            var enemyXspeed = -5;

            var enemy = {
                ENEMY_WIDTH: ENEMY_WIDTH,
                ENEMY_HEIGHT: ENEMY_HEIGHT,
                enemyYpos: enemyYpos,
                enemyXpos: enemyXpos,
                enemyXspeed: enemyXspeed,
            }

            enemies.push(enemy);
        } //end of func

        function drawEnemy() {
            enemies.forEach(function(enemy, i) {
                colorRect(enemy.enemyXpos, enemy.enemyYpos, enemy.ENEMY_WIDTH, enemy.ENEMY_HEIGHT, 'red'); // enemy
            });
        } //end of func


        //playergravity variables
        var direction = 1;
        var velocity = 2;
        var fallingSpeed = 2;


        //playergravity
        function gravity() {
            playerYpos = playerYpos + (direction * velocity);
        } //end of func


        function drawText(msg, x, y, f, c) { //function for use of text
            canvasContext.fillStyle = c;
            canvasContext.font = f;
            canvasContext.fillText(msg, x, y);
        } //end of func

        function colorRect(x, y, w, h, color) {
            canvasContext.fillStyle = color;
            canvasContext.fillRect(x, y, w, h);
        } //end of func

        // function drawImg(src, x, y, w, h) {
        //     canvasContext.drawImage(src, x, y, w, h);
        //}

    </script>
</body>
